public function range(destinationColor:AbstractColor, steps:int, includeSelf:Boolean = false):Vector.<AbstractColor>
{
  var a:RGB = this.toRGB();
  var b:RGB = destinationColor.toRGB();
  var colors:Vector.<AbstractColor> = new Vector.<AbstractColor>();
  steps--;
  var nr:Number;
  var ng:Number;
  var nb:Number;
  for (var n:int = 1; n < steps; n++) {
    nr = Math.floor(a.r+(n*(b.r-a.r)/steps));
    ng = Math.floor(a.g+(n*(b.g-a.g)/steps));
    nb = Math.floor(a.b+(n*(b.b-a.b)/steps));
    colors.push(new RGB(nr,ng,nb)[this.toSelf]());
  }
  if (includeSelf) {
    colors.unshift(this);
    colors.push(destinationColor[this.toSelf]());
  }
  return colors;
}